IDLE
alt + n ====>第一句 
alt + p ====>上一句
输入字符（不完全） + tab ====>可能的命令
control + n ===>新建
control + 下方向键 ====> 光标移到最下
ctrl + alt + [ or ] ====>集体缩进
在之前写过的代码上按enter ====>复制到执行处

//////////////////////////////////////////////////////////////////////////////////////////
Program:
①.
加\可以换行写

②.
三元操作符：A if B else C
如果B成立，输出A
,    否则，输出C

③.
list的构造：
typedef struct {
    PyObject_VAR_HEAD
    PyObject **ob_item;
    Py_ssize_t allocated;
} PyListObject;
其中ob_item 是指针数组。

④.
list append, extend, +：
append：
    L.append(object) -> None -- append object to end
也就是在指针数组里添加一个指针。
例:
>>> x = [0, 1, 2, 3]
>>> id(x)
801833598664
>>> x.append([4, 5])
>>> id(x)
801833598664
>>> type(x[4])
<class 'list'>
>>> x[4].reverse();
>>> x
[0, 1, 2, 3, [5, 4]]
也就是说，append是在原来的list上添加一个新的变量（指针）（或者也可以说是变量名，对应
的，对象指的是变量），注意，因为添加的是一个指针，当指针所指向的内存发生改变时，list
中添加的变量的值也会发生改变，尽管对象还是同一个对象。
例:
>>> y = [6,7]
>>> id(y)
801850176584
>>> x.append(y)
>>> id(x[5])
801850176584
>>> x
[0, 1, 2, 3, [5, 4], [6, 7]]
>>> y.reverse()
>>> id(y)
801850176584
>>> x
[0, 1, 2, 3, [5, 4], [7, 6]]
##############################
extend：
    L.extend(iterable) -> None -- extend list by appending elements from the iterable
例：>>> x = [0,1,2,3]
>>> y = [[4,5]]
>>> id(y[0])
801833600200
>>> x.extend(y)
>>> id(x[4])
801833600200
>>> y[0].reverse()
>>> x
[0, 1, 2, 3, [5, 4]]
也就是说，extend将另一个列表(或者说任意的可迭代对象)y中的每一个变量（指针）添加到列表x
的末尾，当变量所指的对象变化时，对应的列表中对应的对象也会变化，变量不变。

#############################
+:
例1.>>> x = [0,1,2]
>>> y = [3,4,5]
>>> id(x)   
801850179400
>>> id(y)   
801850176520
>>> id(x+y)    
801833600008
>>> x += y    
>>> id(x)   
801850179400
>>> x      
[0, 1, 2, 3, 4, 5]
也就是说，最终生成了一个新的列表，而不是在原有列表上添加。
例2.
>>> x = [0,1,2]
>>> y = [[4,5]]
>>> x += y
>>> y[0].reverse()
>>> x
[0, 1, 2, [5, 4]]
也就是说，相当于把两个列表的变量按照顺序放入一个新的列表。

关于变量与对象详见：
https://www.cnblogs.com/wangxin37/p/6598466.html
以及：https://www.bilibili.com/video/av4050443/index_14.html#page=4
https://www.cnblogs.com/dplearning/p/5998112.html

※注解：以上方法均是添加变量。
如果原列表A添加的是一个变量B，当变量B对应的对象改变时，原列表新添加的变量对应的值也改变，
如果原列表A添加的是一个变量C，当变量C改变并且原来对应的对象不变时，列表不会变化。
举例：
>>> a = [4,5]
>>> b = [1,2,a]
>>> a = [5,6]#此时a变量对应了一个新的对象
>>> b  
[1, 2, [4, 5]]#b不改变

>>> b = [1,2,a]
>>> b
[1, 2, [5, 6]]
>>> b[2][0] = 1#b中变量对应的对象改变
>>> a
[1, 6]#a也发生改变
     有一种方法叫深层拷贝，详见参考中列表的复制。

⑤.
'='与复制
>>> a = 1
>>> b = 1
>>> id(a)    
1601465824
>>> id(b) 
1601465824
>>> a = [1]
>>> b = [1]
>>> id(a)
801850178952
>>> id(b)
801850029128
>>> b = a
>>> id(b)
801850178952 #此时，b与a所指向的对象相同，相当于同一个列表，只是名字不同
>>> b = a[:]
>>> id(b) 
801850176584 #此时，b与a所指向的对象不同，是两个列表，这样子才完成了复制（尽管是浅层复制）

⑥.
列表推导式（List comprehensions）也叫列表解析，灵感取自函数式编程语言 Haskell。Ta 是一个非
常有用和灵活的工具，可以用来动态的创建列表，语法如：
??
[有关A的表达式 for A in B]
??
例如
>>> list1 = [x**2 for x in range(10)]
>>> list1
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
复制代码
相当于
list1 = []
for x in range(10):
? ? list1.append(x**2)

⑦.
所谓的元祖不可变，指的是其中的变量(指针)不可变，指代的对象是可以变的（比如说列表变量）。
????

⑧.
可变参数类型:http://blog.csdn.net/dan15188387481/article/details/49864613
闭包：https://www.cnblogs.com/Lin-Yi/p/7305364.html
闭包变量（外函数给内函数绑定的变量）的使用事项：
例
>>> def f1():
	a = 10
	def fin():
		print(a)
	a = 100
	return fin

>>> f = f1()
>>> f()
100
也就是说闭包fin的闭包变量为a，始终与a这个变量绑定在一起，虽然a所指代的对象改变了（10->100）
但是a并没有改变。a所指代的对象 相当于 内存， id(a)相当于取内存地址， 闭包变量相当于a这个
变量的地址。a = &Obj; 闭包变量 = &a，也就是说与a的值（a所指向的对象）无关。在调用闭包的时候
才将a的值取出来。 
http://blog.csdn.net/lchad/article/details/43968615

⑨.
Map 可以作用于多个迭代对象，并以最短的迭代对象为终止。
zip 函数也是如此。(第二十一课第五题)

map(fun, list1, list2) = fun(list1, list2)

⑩.
根据给定的list建立dict的做法，其中dict的key为0 ~ len(list)。
>>> a = [4,5,6,4,7,8,9]
>>> b = dict([(i, a[i]) for i in range(len(a))]) #使用dict与列表生成式
>>> b = dict(map(lambda i, x : (i, x), list(range(len(a))), a)) #使用dict与map
>>> b = dict(zip(list(range(len(a))), a))#使用dict与zip
用处：可以比list更快速的查找

(11).
set的简介:
https://www.cnblogs.com/wkkkkk/p/5729200.html

//////////////////////////////////////////////////////////////////////////////////////////
Q&A
0. 还记得如何定义一个跨越多行的字符串吗（请至少写出两种实现的方法）？
第一种，每行结尾加 /
第二种,用三引号

1. Python3 可以给变量命名中文名，知道为什么吗？
内置了utf-8解码

2.假设有 x = 1，y = 2，z = 3，请问如何快速将三个变量的值互相交换？ 
答x, y, z = z, y, x

3. 猜猜 (x < y and [x] or [y])[0] 实现什么样的功能？
取第一个值，详见python学习收藏夹。
解答：等同于x < y ? x : y。当x < y时，"x < y and [x] "返回[x],且无论x是否为0，[x]均!=0,所以，"[x
]or[y]"返回[x],再取[0]得到x；当x >= y 时,"x < y and [x] "返回0,且无论y是否为0，[y]均!=0,所
以，"0 or[y]"返回[y],再取[0]得到y。
注解：and 以及 or 的功能与C中的不大一样。

4. append() 方法和 extend() 方法都是向列表的末尾增加元素，请问他们有什么区别？
append() 方法是将参数作为一个元素增加到列表的末尾。
extend() 方法则是将参数作为一个列表去扩展列表的末尾。

5. x, y, z = 1, 2, 3 请问x, y, z是元组吗？
所有的多对象的、逗号分隔的、没有明确用符号定义的这些集合默认的类型都是元组，
/////////////////////////////////////////////////////////////////////////////////////////
参考：

关于变量与对象详见：
https://www.cnblogs.com/wangxin37/p/6598466.html
https://www.bilibili.com/video/av4050443/index_14.html#page=4
https://www.cnblogs.com/dplearning/p/5998112.html

列表的复制，深拷贝与浅拷贝：
http://blog.csdn.net/flyapy/article/details/38041921
https://www.cnblogs.com/blaomao/p/7239203.html
https://www.cnblogs.com/pyramid1001/p/5844905.html

列表生成式
https://www.cnblogs.com/yyds/p/6281453.html